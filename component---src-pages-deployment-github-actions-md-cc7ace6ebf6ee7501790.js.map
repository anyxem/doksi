{"version":3,"sources":["webpack:///./src/pages/Deployment/Github_actions.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"mappings":"mcAMO,IAAMA,EAAe,Q,uLAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sDADR,sDAGA,iBAAQ,CACN,GAAM,+BADR,+BAGA,2EAA0D,0BAAYC,WAAW,KAAvB,sCAC1D,oEACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,22BAmCL,uFACA,iBAAQ,CACN,GAAM,6BADR,6BAGA,uIACF,mBAAKC,IAAI,QAAQC,IAAI,0GACnB,iBAAQ,CACN,GAAM,mBADR,mBAGA,8EAA6D,0BAAYF,WAAW,KAAvB,aAC7D,qBAAG,mBAAKC,IAAI,QAAQC,IAAI,2G,8KAK5BN,EAAWO,gBAAiB","file":"component---src-pages-deployment-github-actions-md-cc7ace6ebf6ee7501790.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/doksi/doksi/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"deploy-documentation-automatic-with-github-actions\"\n    }}>{`Deploy documentation automatic with Github Actions`}</h1>\n    <h2 {...{\n      \"id\": \"add-workflow-to-source-code\"\n    }}>{`Add workflow to source code`}</h2>\n    <p>{`Create a new file in your source repository, named `}<inlineCode parentName=\"p\">{`.github/workflows/deploy_docs.yml`}</inlineCode></p>\n    <p>{`It could contain an action with this steps:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`name: Deploy documentation\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v1\n\n      - name: Set Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: 10.x\n\n      - name: Install npm dependencies\n        working-directory: ./docs\n        run: npm install\n\n      - name: Run tests\n        working-directory: ./docs\n        continue-on-error: false\n        run: npm run test\n\n      - name: Deploy pages\n        working-directory: ./docs\n        run: |\n          git config --global user.name \"Spark documentation bot\"\n          git config --global user.email \"spark@docbot.com\"\n          npx gatsby build --prefix-paths && npx gh-pages -d public -r https://\\${{ secrets.GH_TOKEN }}@github.com/losol/doksi.git\n`}</code></pre>\n    <p>{`Please remember to change the link to your own git repository.`}</p>\n    <h2 {...{\n      \"id\": \"get-personal-access-token\"\n    }}>{`Get personal access token`}</h2>\n    <p>{`In GitHub Settings -> Developer -> Personal access token, create a new Personal access token with repo scope:\n`}<img alt=\"image\" src=\"https://user-images.githubusercontent.com/17168367/69485965-ad869780-0e46-11ea-91a3-dbbdf6c70be3.png\" /></p>\n    <h2 {...{\n      \"id\": \"add-repo-secret\"\n    }}>{`Add repo secret`}</h2>\n    <p>{`Then add a new secret to the repo settings, with name `}<inlineCode parentName=\"p\">{`GH_TOKEN`}</inlineCode></p>\n    <p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/17168367/69485949-4b2d9700-0e46-11ea-92f7-8b3098913918.png\" /></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}